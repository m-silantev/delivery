rootProject.name = 'delivery'
include(':api')
include(':core')
include(':infrastructure')
include(':starter')

dependencyResolutionManagement {
    versionCatalogs {
        libs {
            // versions
            version('spring-boot-version', '3.3.5')
            version('spring-jdbc-version', '6.1.14')
            version('spring-jrpc-client-version', '3.1.0.RELEASE')
            version('spring-kafka-version', '3.2.4')
            version('mapstruct-version', '1.6.2')
            version('postgres-driver-version', '42.7.4')
            version('liquibase-version', '4.29.2')
            version('lombok-version', '8.10.2')
            version('testcontainers-version', '1.20.3')
            version('result4j-version', '1.0')
            version('pipelinr-version', '0.9')
            version('mockito-version', '5.14.2')
            version('openapi-generator-version', '7.8.0')
            version('swagger-annotations-version', '2.2.25')
            version('openapi-springdoc-version', '2.6.0')
            version('protobuf-version', '4.28.3')
            version('protobuf-plugin-version', '0.9.4')
            version('protobuf-generator-version', '1.68.1')
            version('javax-annotation-version', '1.3.1')
            version('jackson-databind-version', '2.18.1')

            // libraries
            library('spring-boot-core', 'org.springframework.boot', 'spring-boot').versionRef('spring-boot-version')
            library('spring-boot-starter-web', 'org.springframework.boot', 'spring-boot-starter-web').versionRef('spring-boot-version')
            library('spring-boot-starter-data-jdbc', 'org.springframework.boot', 'spring-boot-starter-data-jdbc').versionRef('spring-boot-version')
            library('spring-boot-starter-validation', 'org.springframework.boot', 'spring-boot-starter-validation').versionRef('spring-boot-version')
            library('spring-boot-starter-logging', 'org.springframework.boot', 'spring-boot-starter-logging').versionRef('spring-boot-version')
            library('spring-boot-autoconfigure', 'org.springframework.boot', 'spring-boot-autoconfigure').versionRef('spring-boot-version')
            library('mapstruct', 'org.mapstruct', 'mapstruct').versionRef('mapstruct-version')
            library('mapstruct-processor', 'org.mapstruct', 'mapstruct-processor').versionRef('mapstruct-version')
            library('postgres-driver', 'org.postgresql', 'postgresql').versionRef('postgres-driver-version')
            library('liquibase', 'org.liquibase', 'liquibase-core').versionRef('liquibase-version')
            library('result4j', 'com.github.sviperll', 'result4j').versionRef('result4j-version')
            library('pipelinr', 'net.sizovs', 'pipelinr').versionRef('pipelinr-version')
            library('swagger-annotations', 'io.swagger.core.v3', 'swagger-annotations').versionRef('swagger-annotations-version')
            library('openapi-springdoc', 'org.springdoc', 'springdoc-openapi-starter-webmvc-ui').versionRef('openapi-springdoc-version')
            library('spring-kafka', 'org.springframework.kafka', 'spring-kafka').versionRef('spring-kafka-version')
            library('protobuf-java', 'com.google.protobuf', 'protobuf-java').versionRef('protobuf-version')
            library('protobuf-java-util', 'com.google.protobuf', 'protobuf-java-util').versionRef('protobuf-version')
            library('protobuf-compiler', 'com.google.protobuf', 'protoc').versionRef('protobuf-version')
            library('protobuf-generator', 'io.grpc', 'protoc-gen-grpc-java').versionRef('protobuf-generator-version')
            library('spring-boot-starter-jrpc-client', 'net.devh', 'grpc-client-spring-boot-starter').versionRef('spring-jrpc-client-version')
            library('javax-annotation', 'javax.annotation', 'javax.annotation-api').versionRef('javax-annotation-version')
            library('jackson-databind', 'com.fasterxml.jackson.core', 'jackson-databind').versionRef('jackson-databind-version')

            // test libraries
            library('spring-boot-test', 'org.springframework.boot', 'spring-boot-starter-test').versionRef('spring-boot-version')
            library('mockito-core', 'org.mockito', 'mockito-core').versionRef('mockito-version')
            library('mockito-junit', 'org.mockito', 'mockito-junit-jupiter').versionRef('mockito-version')
            bundle('mockito', ['mockito-core', 'mockito-junit'])
            library('testcontainers-core', 'org.testcontainers', 'testcontainers').versionRef('testcontainers-version')
            library('testcontainers-junit', 'org.testcontainers', 'junit-jupiter').versionRef('testcontainers-version')
            library('testcontainers-postgres', 'org.testcontainers', 'postgresql').versionRef('testcontainers-version')
            bundle('testcontainers', ['testcontainers-core', 'testcontainers-junit', 'testcontainers-postgres'])

            // plugins
            plugin('spring-boot', 'org.springframework.boot').versionRef('spring-boot-version')
            plugin('lombok', 'io.freefair.lombok').versionRef('lombok-version')
            plugin('openapi-generator', 'org.openapi.generator').versionRef('openapi-generator-version')
            plugin('protobuf', 'com.google.protobuf').versionRef('protobuf-plugin-version')
        }
    }
}
