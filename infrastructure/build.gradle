plugins {
    alias(libs.plugins.lombok)
    alias(libs.plugins.protobuf)
}

dependencies {
    compileOnly project(':core')
    compileOnly libs.spring.boot.starter.data.jdbc
    compileOnly libs.postgres.driver
    compileOnly libs.liquibase
    compileOnly libs.protobuf.java
    compileOnly libs.spring.boot.starter.jrpc.client
    compileOnly libs.javax.annotation
    compileOnly libs.spring.kafka
    compileOnly libs.protobuf.java.util

    testImplementation project(':core')
    testImplementation libs.bundles.testcontainers
    testImplementation libs.spring.boot.test
    testImplementation libs.spring.boot.starter.data.jdbc
    testImplementation libs.postgres.driver
    testImplementation libs.liquibase
    testImplementation libs.spring.boot.starter.jrpc.client
    testImplementation libs.spring.kafka
}

protobuf {
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = "${libs.protobuf.compiler.get()}"
    }
    plugins {
        // Optional: an artifact spec for a protoc plugin, with "grpc" as
        // the identifier, which can be referred to in the "plugins"
        // container of the "generateProtoTasks" closure.
        grpc {
            artifact = "${libs.protobuf.generator.get()}"
        }
    }
    generateProtoTasks {
        ofSourceSet('main').configureEach {
            plugins {
                // Apply the "grpc" plugin whose spec is defined above, without
                // options.  Note the braces cannot be omitted, otherwise the
                // plugin will not be added. This is because of the implicit way
                // NamedDomainObjectContainer binds the methods.
                grpc { }
            }
        }
    }
}
